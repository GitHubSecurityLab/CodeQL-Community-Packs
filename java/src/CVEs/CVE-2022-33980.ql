/**
 * @name Apache Commons Configuration Script Injection
 * @kind path-problem
 * @problem.severity error
 * @precision high
 * @id java/acc-script-injection
 * @tags security
 *       external/cwe/cwe-094
 */

import java
import semmle.code.java.dataflow.FlowSources
import semmle.code.java.dataflow.TaintTracking
import DataFlow
import DataFlow::PathGraph

class InterpolatorConfig extends TaintTracking::Configuration {
  InterpolatorConfig() { this = "InterpolatorConfig" }

  override predicate isSource(DataFlow::Node source) { source instanceof RemoteFlowSource }

  override predicate isSink(DataFlow::Node sink) {
    exists(MethodAccess ma, Method m | ma.getMethod() = m and ma.getAnArgument() = sink.asExpr() |
      m.getName() = ["addProperty", "setProperty"] and
      m.getDeclaringType()
          .getASourceSupertype*()
          .hasQualifiedName("org.apache.commons.configuration2", "Configuration")
      or
      m.getName() = "load" and
      m.getDeclaringType()
          .getASourceSupertype*()
          .hasQualifiedName("org.apache.commons.configuration2.io", "FileHandler") and
      m.getParameterType(0)
          .(RefType)
          .getASourceSupertype*()
          .hasQualifiedName("java.io", ["InputStream", "Reader"])
    )
  }
}

from DataFlow::PathNode source, DataFlow::PathNode sink, InterpolatorConfig conf
where conf.hasFlowPath(source, sink)
select sink.getNode(), source, sink, "injection from $@.", source.getNode(), "this user input"
