/**
 * @name Spring4Shell
 * @description ClassLoader Manipulation in Spring Beans
 * @kind path-problem
 * @problem.severity error
 * @precision high
 * @id githubsecuritylab/spring4shell
 * @tags security
 */

import java
import semmle.code.java.dataflow.FlowSources
import Spring4ShellFlow::PathGraph
import ghsl.BeanManipulation

private module Spring4ShellConfig implements DataFlow::ConfigSig {
  predicate isSource(DataFlow::Node source) {
    source instanceof RemoteFlowSource and
    source.asExpr().getEnclosingCallable().getDeclaringType().hasName("WebUtils")
  }

  predicate isSink(DataFlow::Node sink) { sink instanceof BeanManipulationSink }

  predicate isAdditionalFlowStep(DataFlow::Node n1, DataFlow::Node n2) {
    exists(ConstructorCall ma |
      ma.getConstructor().getDeclaringType().getASourceSupertype*().hasName("MutablePropertyValues") and
      n1.asExpr() = ma.getAnArgument() and
      n2.(DataFlow::PostUpdateNode).getPreUpdateNode() = DataFlow::getInstanceArgument(ma)
    )
  }

  predicate isBarrier(DataFlow::Node n) {
    n.getLocation().getFile().getRelativePath().matches(["%test%", "%mock%"])
    or
    exists(MethodAccess ma |
      ma.getMethod().hasName("toString") and DataFlow::getInstanceArgument(ma) = n
    )
  }
}

module Spring4ShellFlow = TaintTracking::Global<Spring4ShellConfig>;

from Spring4ShellFlow::PathNode source, Spring4ShellFlow::PathNode sink
where Spring4ShellFlow::flowPath(source, sink)
select sink, source, sink, "Bean Manipulation at $@.", sink.getNode(), "user input"
