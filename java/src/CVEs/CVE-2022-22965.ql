/**
 * @name Spring4Shell
 * @description ClassLoader Manipulation in Spring Beans
 * @kind path-problem
 * @problem.severity error
 * @precision high
 * @id seclab/spring4shell
 * @tags security
 */

import java
import semmle.code.java.dataflow.FlowSources
import DataFlow::PathGraph
import seclab.security.BeanManipulation

class Spring4ShellConfig extends TaintTracking::Configuration {
  Spring4ShellConfig() { this = "Spring4ShellConfig" }

  override int fieldFlowBranchLimit() { result = 4 }

  override predicate isSource(DataFlow::Node source) {
    source instanceof RemoteFlowSource and
    source.asExpr().getEnclosingCallable().getDeclaringType().hasName("WebUtils")
  }

  override predicate isSink(DataFlow::Node sink) { sink instanceof BeanManipulationSink }

  override predicate isAdditionalTaintStep(DataFlow::Node n1, DataFlow::Node n2) {
    exists(ConstructorCall ma |
      //ma.getConstructor().getDeclaringType().getASourceSupertype*().hasName("PropertyValue") and
      ma.getConstructor().getDeclaringType().getASourceSupertype*().hasName("MutablePropertyValues") and
      n1.asExpr() = ma.getAnArgument() and
      n2.(DataFlow::PostUpdateNode).getPreUpdateNode() = DataFlow::getInstanceArgument(ma)
    )
  }

  override predicate isSanitizer(DataFlow::Node n) {
    n.getLocation().getFile().getRelativePath().matches(["%test%", "%mock%"])
    or
    exists(MethodAccess ma |
      ma.getMethod().hasName("toString") and DataFlow::getInstanceArgument(ma) = n
    )
  }
}

from DataFlow::PathNode source, DataFlow::PathNode sink, Spring4ShellConfig conf
where conf.hasFlowPath(source, sink)
select sink, source, sink, "Bean Manipulation at $@.", sink.getNode(), "user input"
