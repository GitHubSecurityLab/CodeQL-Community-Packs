/**
 * @name Log4Shell
 * @description JNDI Injection in Log4J library
 * @kind path-problem
 * @problem.severity error
 * @precision high
 * @id githubsecuritylab/log4shell
 * @tags security
 */

import java
import semmle.code.java.dataflow.TaintTracking
import semmle.code.java.security.JndiInjection
import Log4ShellFlow::PathGraph

private module Log4ShellConfig implements DataFlow::ConfigSig {
  int fieldFlowBranchLimit() { result = 9 }

  predicate isSource(DataFlow::Node source) {
    exists(Method m, Parameter p |
      m.getParameter(0) = p and
      p = source.asParameter() and
      m.getASourceOverriddenMethod().hasQualifiedName("org.apache.logging.log4j", "Logger", "info") and
      p.getType().(RefType).hasQualifiedName("java.lang", "CharSequence") and
      m.getNumberOfParameters() = 1
    )
  }

  predicate isSink(DataFlow::Node sink) { sink instanceof JndiInjectionSink }

  predicate isBarrier(DataFlow::Node n) {
    exists(string s | n.getLocation().getFile().getBaseName() = s |
      s.matches("%Appender.java") and not s = "AbstractOutputStreamAppender.java"
      or
      s.matches("%Layout.java") and not s = "PatternLayout.java"
    )
    or
    exists(string s | n.getLocation().getFile().getRelativePath() = s | s.matches("%/src/test/%"))
  }
}

module Log4ShellFlow = TaintTracking::Global<Log4ShellConfig>;

from Log4ShellFlow::PathNode source, Log4ShellFlow::PathNode sink
where Log4ShellFlow::flowPath(source, sink)
select sink, source, sink, "Log4shell"
